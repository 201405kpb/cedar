<style>
  body,html {
    height:100%;
  }
  #chart-container {
    position: absolute;
    bottom: 10px;
    top: 52px;
    right: 0px;
    width: 500px;
    height: 100%;
    background: rgba(0,0,0,0.88);
    background: rgba(241, 241, 241, 0.88);
  }
  #chart {
    overflow:hidden;
  }
  #chart-scatter {
    overflow:hidden;
  }
  #chart canvas, #chart-scatter canvas {
    margin: auto;
    display: block;
    color:#FFF;
  }
  #ex-container {
    height:100%;
    overflow:hidden;
    margin-top:-20px;
  }
  #map {
    height:100%;
  }
</style>

<link rel="stylesheet" href="http://js.arcgis.com/3.12/esri/css/esri.css">
<script src="http://js.arcgis.com/3.12/"></script>

<div id="ex-container">
  <div id="map"></div>
  <div id="chart-container">
    <h5 style="padding-left:10px;">USA Tornado Analysis</h5>
    <div id="chart"></div>
    <div id="chart-scatter"></div>
</div>

<script>
  require(["esri/map", "esri/basemaps", "esri/layers/FeatureLayer", "esri/symbols/SimpleMarkerSymbol", "esri/symbols/SimpleLineSymbol",
    "esri/renderers/SimpleRenderer",  "esri/renderers/UniqueValueRenderer", "esri/Color", "dojo/domReady!"], function(Map, esriBasemaps, FeatureLayer, 
       SimpleMarkerSymbol, SimpleLineSymbol, SimpleRenderer, UniqueValueRenderer, Color) { 

    var defaultSymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, 9,
      new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,
      new Color([28,107,160,1]), 0.5),
      new Color([0,255,255,0.5]));

    var rend = new SimpleRenderer(defaultSymbol);

    var featureLayer = new FeatureLayer("http://services.arcgis.com/qEmpZrqTBf5yoq5n/arcgis/rest/services/tornadoes/FeatureServer/0",{
      mode: FeatureLayer.MODE_ONDEMAND,
      outFields: ["*"]
    });

    //create esri map
    var map = new Map("map", {
      center: [-80, 38.9],
      zoom: 5,
      basemap: "gray",
      smartNavigation: false
    });

    map.on('load', function() {
      map.disableScrollWheelZoom();
    });

    map.on('extent-change', function() {
      onExtentChanged();
    });

    window.map = map;

    featureLayer.setRenderer(rend);
    map.addLayer(featureLayer);
    
    console.log('featureLayer', featureLayer);

    var dataset = {
      "url":"http://services.arcgis.com/qEmpZrqTBf5yoq5n/arcgis/rest/services/tornadoes/FeatureServer/0",
      "query": {},
      "mappings":{
        "group": {"field":"STATE","label":"State"},
        "count": {"field":"INJURIES","label":"Injuries"}
      }
    };

    var chart = new Cedar({"specification":"../data/templates/bar-complex.json", "dataset": dataset});

    chart.override = {
      "height": 280,
      "width": 445,
      "marks": [{"properties": {
          "hover": {"fill": {"value": "#3ba3d0"}},
          "update": {"fill": {"value": "#7de6ff"}}
        }
      }]
    };

    //create and render a chart
    chart.show({
      'elementId': '#chart'
    });

    window.chart = chart;

    chart.on('mouseover', onChartHover);




    //chart two!
    var scatterset = {
      "url":"http://services.arcgis.com/qEmpZrqTBf5yoq5n/arcgis/rest/services/tornadoes/FeatureServer/0",
      "query": {},
      "mappings":{
        "x": {"field":"MONTH","label":"Month"},
        "y": {"field":"INJURIES","label":"Injuries"},
        "color":{"field":"FSCALE","label":"F-Scale"}
      }
    };
    
    var scatter = new Cedar({"specification":"../data/templates/scatter-complex.json", "dataset": scatterset});

    scatter.override = {
      "height": 280,
      "width": 390
    };

    //create and render a chart
    scatter.show({
      'elementId': '#chart-scatter'
    });
    window.scatter = scatter;


    //filter by map extent when user zooms
    function onExtentChanged() {
      var extent = map.extent;
      extent = JSON.stringify(extent);
      chart.dataset.query.geometry = extent;
      chart.update();

      scatter.dataset.query.geometry = extent;
      scatter.update();
    }

    function onChartHover(e,d) {
      
      //get selected value for attribute in chart marker
      var selected = d[dataset.mappings.group.field];
      
      //create renderer
      var renderer = new UniqueValueRenderer(defaultSymbol, dataset.mappings.group.field);

      //add symbol selected value
      renderer.addValue(selected, new SimpleMarkerSymbol().setColor(new Color([59,163,208, 0.7])).setSize(8));

      featureLayer.setRenderer(renderer);
      //map.centerAt(map.extent.getCenter());
      //featureLayer.refresh();
      featureLayer.redraw();

    } 

  });

</script>