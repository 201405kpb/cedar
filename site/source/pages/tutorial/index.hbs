---
title: Cedar Tutorial
description: A walkthrough of building a chart
layout: example.hbs
---

<p>Before starting on this tutorial, see <a href="https://github.com/Esri/cedar#loading-cedar">Loading Cedar</a> for details on how to load Cedar and its dependencies on the page.</p>

<h3>Cedar Properties</h3>
A Cedar chart needs four things: Chart Type, Data, Mappings, DOM Element.

First we create a new Cedar object and specify we want a bar chart. In this example we simply use `type: "bar"`, but instead we could refer to the full URL to a chart specification.

<pre class="prettyprint">var chart = new Cedar({
  "type":"bar"
});
</pre>

Now we need to define the data. We can either use an array of data that we have calculated in our code, or we can refer to an ArcGIS GeoServices layer. For the GeoServices Layer, Cedar will make the HTTP API calls to request data for us.

<pre class="prettyprint">chart.datasets = [{
  "url":"https://server.arcgisonline.com/arcgis/rest/services/Demographics/USA_Population_Density/MapServer/4",
  "query": {
    "orderByFields": "TotPop DESC"
  };
}],
</pre>

Third, we now create a series to plot the dataset on the chart

<pre class="prettyprint">chart.dataset.series = [
  {
    "category": {"field":"STATE_NAME","label":"US State"},
    "value": {"field":"TotPop","label":"Population"}
  }
]</pre>

Lastly, we now show the chart and bind it to an HTML DOM element.

<pre class="prettyprint">chart.show({
  elementId: "#chart"
});
</pre>

And that's it, we now have a chart!

See the <a href="../api/">API documentation</a> to learn more about the above properties.

<hr>
<h3>Constructor Options</h3>

We could also create the instance of the Cedar chart by passing those properties as options to the constructor:

<pre class="prettyprint">
  var chart = new Cedar({
    "type": "bar",
    "datasets": [{
        "url":"https://maps7.arcgisonline.com/arcgis/rest/services/Veterans_Proportion_From_Population/MapServer/0",
      "query": {
        "orderByFields": "TotPop DESC"
      }
    }],
    "series": [
      {
        "category": {"field":"STATE_NAME","label":"US State"},
        "value": {"field":"TotPop","label":"Population"}
      }
    ]
  });

  // show the chart and bind it to the DOM
  chart.show({
    elementId: '#chart'
  });
</pre>

<h3>Learn more</h3>

<p>You can play around with this chart in a JSFiddle:</p>

<iframe width="100%" height="600" src="//jsfiddle.net/tomwayson/dox5o6w4/embedded/result,js,html,resources/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>Then explore the <a href="../examples/">Examples</a> to see how to use other chart types, override chart defaults and styles, handle events, and integrate charts with ArcGIS maps.</p>
